[
    {
        "key": 1,
        "name": "CSS Frameworks",
        "img": "https://i.ibb.co/QFMz0qC/css3-logo.png",
        "part1": "CSS Frameworks are some library allowing for easier, more standards-compliant web design using the CSS. Here are 3 popular frameworks:",
        "part2": "Bootstrap: An initiative by Twitter, Bootstrap takes credit for introducing responsive design on a large scale. It was the first framework to promote the philosophy of “mobile-first.” No longer was designing for smaller screen sizes a separate project in itself; all you needed to do was include the relevant Bootstrap classes, and the design would automatically adjust for different screen sizes (well, almost). Bootstrap achieved responsive design by introducing the idea of a grid. A grid is an invisible partition of the screen into columns (along with the width). For example, if you have two “boxes” you want to position side by side on large screens, but vertically on smaller screens, this is what you’d do: The current popular version of Bootstrap is 4, which was a major overhaul over the 3.3 series. The above syntax is how you’d code in Bootstrap 4, which owes a lot of its elegance to the raw power of Flexbox and other modern layout features supported by browsers directly. In the lower versions of Bootstrap, the grid was defined as a total of 12 columns.",
        "part3": "Foundation: If technologies were religions, the Foundation and Bootstrap guys would be out for each other’s blood. No discussion of modern CSS frameworks is complete without mentioning Foundation, so here we go. Head over to the Foundation website, and you can’t help but notice the byline: “The most advanced responsive front-end framework in the world.” At first glance, it looks like a tall claim to go with a marketing campaign. However, adherents of the Foundation framework know there’s at least some truth to that. Foundation was developed to go naturally with the Rails framework, and several of the Rails’ “zen-like” guiding principles can be seen at work. For instance, if you wanted a row that contained two elements on small screens, three on medium, and four on large ones, the equivalent code in Foundation will look like this.",
        "part4": "Tailwind CSS: I remember the early days when Tailwind CSS was released. It barely made a soft thud, and the ecosystem gave it no attention; and rightly so, given that Tailwind was neither backed by a tech giant nor had the push of a massive marketing budget. Besides, with Tailwind, you didn’t get a Bootstrap-like experience, something that had (or maybe still is) become the norm. In fact, Tailwind advocated a style of writing and using CSS that sent many screaming in disgust. I mean, look at the use of CSS classes in the following piece of code (taken from the Tailwind website): Now, if you’ve been a developer for more than a couple of years, you’d likely feel nausea. So . . . many . . . classes . . . ! And while there’s no inline CSS here, it feels like that given how explicit (and ugly?) the class names are. So, for quite some time, Adam Wathan (the creator of Tailwind) was running from pillar to post (that is, in podcasts, conferences, blog posts, tweets) about why he thought utility-based CSS was superior to semantic CSS. So, as I was saying, there was little to no impact made by Tailwind. But here and there, one by one, developers started liking and adopting the approach. I might be wrong, but I’d say somewhere in 2019, Tailwind exploded in popularity. It brought to Web development an unconventional approach and attention to some nifty tooling such as PurgeCSS. Today, utility-based CSS has made a sizeable dent. For many, Tailwind has been a breath of fresh air they desperately needed. If you are tired of your current CSS library and want to try something radical and new, Tailwind is what you’re looking for!",
        "part5": "As compared to earlier Bootstrap versions, I find this very intuitive and easy to memorize. No more twelve column grids and figuring out what 4/12 is supposed to be! While Foundation is much less popular than Bootstrap, it’s a trade secret for many expert front-end developers."
    },
    {
        "key": 2,
        "name": "Let's talk about var, let & const",
        "img": "https://i.ibb.co/c8bbp1g/1-Uv-WOn-Sl-WP7-Abb-Ot-SVUe-HMg-copy.jpg",
        "part1": "Var: When a var variable is declared outside a function, it’s said to be globally available. This means that it’s globally scoped, or available to the entire window.",
        "part2": "Var: When a var variable is declared outside a function, it’s said to be globally available. This means that it’s globally scoped, or available to the entire window. Scope asks: where in our code can our variables be used? But when we declare a var variable inside a function, that variable is no longer globally scoped; instead, it’s locally scoped. This error is telling us that goodbye doesn’t exist, or at least it’s not accessible from the window. That’s because it has a functional scope and can’t be accessed from outside that function. I like to think that the curly braces are “hiding” this variable from the outside environment. What happens when we declare the same var variables globally and locally? We can see that invoking greeting returns the locally scoped var variable. This is due to JavaScript’s scope chain: JavaScript will first look for a matching variable in a function’s local scope before it checks the global scope. The scope chain is uni-directional and always starts with the nearest local scope before moving outward. Another important note about var variables is their ability to overwrite a previously declared var variable in the same scope: You can probably agree that this isn’t always favorable. When we write lengthy code, we may unknowingly redeclare the same variable more than once because it happens to the best of us. Hence, why ES2016 introduced let and const.",
        "part3": "Let: When we use a let variable within a code block, it’s available only within that code block (block scoped). A code block is anything between {}. This means that if/else statements and for loops are code blocks. You’ll soon see that var doesn’t behave the same way. Declaring a let variable in the global scope will make it available to all functions declared in that scope. Like var, a let variable and its value can be updated in the same scope. However, we can’t redeclare a let variable. The difference between var and let is clear when we look at non-function code blocks such as if/else statements. Declaring the same let variable in the global scope and within a code block won’t throw an error; each variable keeps its assignment as declared in its scope.",
        "part4": "Const: Const variables are assigned values that are constant, or don’t change throughout your code. Like, let, const variables are available within the scope that they are declared. Additionally, const variables are hoisted to the top of the scope but not initialized. Basically, const and let variables behave exactly the same with few exceptions — const variables cannot update their values; they are immutable. And one more thing: const variables must be declared and initialized (assigned) in the same line prior to using them. Otherwise, a SyntaxError is throw. Const variables are hoisted to the top of their scope like let and var variables."
    },
    {
        "key": 3,
        "name": "What is React, React Router & How to use CSS in react?",
        "img": "https://i.ibb.co/kBBCj7q/1-m07g-Vwdi-Mvt-Xx-Iz4-CUf4pw-copy.jpg",
        "part1": "ReactJS is an open-source, component-based front-end library responsible only for the view layer of the application. It is maintained by Facebook.",
        "part2": "What is React Router? ReactJS is an open-source, component-based front-end library responsible only for the view layer of the application. It is maintained by Facebook. ReactJS uses a virtual DOM-based mechanism to fill in data (views) in HTML DOM. The virtual DOM works fast owning to the fact that it only changes individual DOM elements instead of reloading complete DOM every time. A React application is made up of multiple components, each responsible for outputting a small, reusable piece of HTML. Components can be nested within other components to allow complex applications to be built out of simple building blocks. A component may also maintain an internal state - for example, a TabList component may store a variable corresponding to the currently open tab. React allows us to write components using a domain-specific language called JSX. JSX allows us to write our components using HTML, whilst mixing in JavaScript events. React will internally convert this into a virtual DOM, and will ultimately output our HTML for us. React 'reacts' to state changes in your components quickly and automatically to rerender the components in the HTML DOM by utilizing the virtual DOM. The virtual DOM is an in-memory representation of an actual DOM. By doing most of the processing inside the virtual DOM rather than directly in the browser's DOM, React can act quickly and only add, update, and remove components that have changed since the last render cycle occurred.",
        "part3": "What is React Router? When we build a website, most of them built with React.js are SPA (single page application), but it doesn’t mean your app will have only one view. It means your app doesn’t need to reload to another view, but how can we change views and go to the next page? React Router helps us to do that!React Router is the official and standard routing package that we use in React.js to change views, and move between pages. With the React router, we can specify the whole routing for our modules that will decide what view should be visible when we enter the specified URL but not only. React router gives us the possibility to create protected views like, for example, the view that we need to be logged in or have any special requirements to visit. One more useful feature of the React Router is the routing history, which can keep all of the histories of our views, and come back to the specified step when needed. I couldn’t forget to tell about handling the URL params like, for example, the id of element, to render the route that can show specified elements, and give you access to that param. We can use routing navigation in a few ways. The most popular is to type URL, visit URL by a link inside the menu, or add data to the routing history.",
        "part4": "How To Import CSS In ReactJS? Now I’ll show you how to import CSS in react.js components, in the two most easy, and kinda popular ways. When we build apps in React.js in some cases, we can use CSS frameworks like bootstrap, Bulma, or something popular now. Next, we can build a layout like puzzles and focus only on things like Javascript or Typescript logic. But sometimes, we need to create our own styling even I’d say that can happen kind of often, and how can we solve that? There are a few methods of including CSS into the React.js components, some of them are more complicated, some less, but all of them have pros and cons. Anyway, today I’ll show you one of them, the easiest one, and the quickest to implement. I like to use that method, especially in bigger projects, when we need to have all the styles sorted and put into separate folders. We can import the sass file into our files by using a relative import path. With that method, we can create a directory “styles” inside our project directory, sort all of the style files by feature, function, or how we want, and import the file into our component directly. It helps us sort all the helpers, variables, and necessary style up to files, where it’s needed, but still can be kept in one place."
    },
    {
        "key": 4,
        "name": "Let's talk about back-ends",
        "img": "https://i.ibb.co/Vxsvddz/4-steps-to-install-nodejs-on-ubuntu-20-04.png",
        "part1": "Node is a JavaScript environment built on the same JavaScript engine used in Google’s Chrome web browser. It has some great features that make it an attractive choice for building server-side application.",
        "part2": "What is Node? Node is a JavaScript environment built on the same JavaScript engine used in Google’s Chrome web browser. It has some great features that make it an attractive choice for building server-side application middle tiers, including web servers and web services for platform APIs. The non-blocking event-driven I/O model gives it very attractive performance, easily beating threaded server environments like PHP and Ruby on Rails, which block on I/O and handle multiple simultaneous users by spinning up separate threads for each.",
        "part3": "Node Features: Fast! (Non-blocking I/O by default). Easy to get started. Event-driven. First-class networking. First-class streaming API. Great standard libraries for interfacing with the OS, filesystem, etc… Support for compiled binary modules when you need to extend Node’s capabilities with a lower-level language like C++. Trusted and backed by large enterprises running mission-critical apps. (Adobe, Google, Microsoft, Netflix, PayPal, Uber, Walmart, etc…).",
        "part4": "What is Express? It’s a minimalist and extensible web framework built for the Node.js ecosystem. It enables you to create a web server that is more readable, flexible, and maintainable than you would be able to create using only the Node HTTP library, which can get verbose and complicated for even the most basic web servers. Express is going to make creating a web server much easier! As a matter of fact, it’s difficult to even find examples of real-world web applications that use only the Node HTTP library because you’d have to be sadistic to do it.",
        "part5": "What is CRUD Operation? The CRUD concept was not originally conceived as a modern way to create APIs. CRUD actually has its roots in database records. Most modern web and mobile applications contain some form of CRUD functionality. In addition, most programmers have to deal with CRUD at some point. So, a CRUD application would be one that utilizes forms to retrieve and return data from a database. A relational database consists of tables with rows and columns. In a relational database, each row in a table is called a record, and each column in the table represents a specific attribute or field. Users can call four CRUD functions to perform different types of operations on selected data in the database. This can be done through code or through GUI. Now, let’s take a look at each function separately.",
        "part6": "CREATE: This feature will add a new student to the app/database by some trigger, for example, by pressing the “Add” button in the application, which will call the corresponding function. The program calling the function would supply the values ​​for “first_name”, “last_name”, and “course”. After the function is called, a new student record will appear in the database. READ: This function allows you to see if there is a record about a specific student in the database. This function does not change the information about the student in any way, but only allows you to get information about him. You can also see a certain attribute. UPDATE: It's a function that changes information about a student. Let’s write his name. After the function is applied, the corresponding record in the database table will be changed. DELETE: Of course, everything should be clear here. This function either completely removes the object or removes its selected attribute.",
        "part7": "By definition, CRUD is more of a cycle than an architectural concept. There are several CRUD loops in any web application. For example, in an online store, a customer can CREATE an account, UPDATE account information, and DELETE items from the cart. At the same time, a store admin using the same web application can CREATE shipping records, READ them as needed, and UPDATE supply lists."
    }
]